services:
  postgres:
    image: postgres:15
    container_name: stockviewer-postgres
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:${DB_PORT:-5432}"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER:-user}", "-d", "${DB_NAME:-stockviewer}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  spring:
    build:
      context: ./stock_api_service
      dockerfile: Dockerfile
    container_name: stockviewer-spring
    restart: on-failure
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 10

  go:
    build:
      context: ./stock_scheduler_service
      dockerfile: Dockerfile
    container_name: stockviewer-go
    restart: on-failure
    volumes:
      - .env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network

  kafka:
    image: apache/kafka:3.7.1
    container_name: stockviewer-kafka
    restart: always
    env_file:
      - .env
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    healthcheck:
        test: ["CMD", "nc", "-z", "localhost", "9092"]
        interval: 5s
        retries: 20
    volumes:
      - kafka-data:/kafka/data
      - ./kafka-init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  nginx:
    build:
      context: ./stock_frontend
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      spring:
        condition: service_healthy
    networks:
      - app-network

volumes:
  pgdata:
  kafka-data:

networks:
  app-network:
    driver: bridge
